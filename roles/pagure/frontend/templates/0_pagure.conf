WSGISocketPrefix run/wsgi
#WSGIRestrictStdout On
WSGIRestrictSignal Off
WSGIPythonOptimize 1
WSGIPassAuthorization On
WSGIDaemonProcess pagure user=git group=git maximum-requests=1000 display-name=pagure processes=6 threads=6 inactivity-timeout=300
WSGIDaemonProcess paguredocs user=git group=git maximum-requests=1000 display-name=paguredocs processes=4 threads=4 inactivity-timeout=300

## Redirects http -> https

<VirtualHost *:80>
{% if env == 'pagure-staging' %}
  ServerName stg.pagure.io
  ProxyPass "/.well-known/acme-challenge" "http://certgetter01/.well-known/acme-challenge"
  Redirect permanent / https://stg.pagure.io/
{% else %}
  ServerName pagure.io
  Redirect permanent / https://pagure.io/
{% endif %}
</VirtualHost>

<VirtualHost *:80>
{% if env == 'pagure-staging' %}
  ServerName docs.stg.pagure.org
  ProxyPass "/.well-known/acme-challenge" "http://certgetter01/.well-known/acme-challenge"
  Redirect permanent / https://docs.stg.pagure.org/
{% else %}
  ServerName docs.pagure.org
  Redirect permanent / https://docs.pagure.org/
{% endif %}
</VirtualHost>

<VirtualHost *:80>
{% if env == 'pagure-staging' %}
  ServerName releases.stg.pagure.org
  ProxyPass "/.well-known/acme-challenge" "http://certgetter01/.well-known/acme-challenge"
  Redirect permanent / https://releases.stg.pagure.org/
{% else %}
  ServerName releases.pagure.org
  Redirect permanent / https://releases.pagure.org/
{% endif %}
</VirtualHost>

<VirtualHost *:80>
{% if env == 'pagure-staging' %}
  ServerName stg.pagure.org
  ProxyPass "/.well-known/acme-challenge" "http://certgetter01/.well-known/acme-challenge"
  Redirect permanent / https://releases.stg.pagure.org/
{% else %}
  ServerName pagure.org
  #Redirect permanent / https://releases.pagure.org/
  ProxyPass "/.well-known/acme-challenge" "http://certgetter01/.well-known/acme-challenge"
{% endif %}

# Added until we can get the cert out
  DocumentRoot "/var/www/releases"

  <Directory />
    Options +Indexes
    IndexOptions NameWidth=*
  </Directory>

</VirtualHost>



## End of redirects http -> https


<VirtualHost *:443>
{% if env == 'pagure-staging' %}
  ServerName stg.pagure.io
{% else %}
  ServerName pagure.io
{% endif %}

  Alias "/robots.txt" "/var/www/html/robots.txt"

  WSGIScriptAlias / /var/www/pagure.wsgi

  ServerAdmin admin@fedoraproject.org

  SSLEngine on
  SSLProtocol {{ ssl_protocols }}
  SSLCipherSuite {{ ssl_ciphers }}
  # Use secure TLSv1.1 and TLSv1.2 ciphers
  Header always add Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

  SSLCertificateFile /etc/pki/tls/certs/pagure.io.cert
  SSLCertificateChainFile /etc/pki/tls/certs/pagure.io.intermediate.cert
  SSLCertificateKeyFile /etc/pki/tls/certs/pagure.io.key

{% if env == 'pagure-staging' %}
  Alias /static /usr/lib/python3.6/site-packages/pagure/static/
{% else %}
  Alias /static /usr/lib/python2.7/site-packages/pagure/static/
{% endif %}

  <Location "/static/vendor/emojione/emojione.sprites.png">
    ExpiresActive On
    ExpiresDefault "access plus 1 week"
    Header append Cache-Control "public"
  </Location>

  SetEnv GIT_PROJECT_ROOT /srv/git/repositories

  <Location />
   WSGIProcessGroup pagure
   <IfModule mod_authz_core.c>
      # Apache 2.4
      Require all granted
   </IfModule>
   <IfModule !mod_authz_core.c>
      # Apache 2.2
      Order deny,allow
      Allow from all
   </IfModule>
  </Location>

  <Location /releases>
  Redirect "/releases" https://releases.pagure.org
  </Location>

  <Location /apache-status>
      SetHandler server-status
      <RequireAny>
          Require ip 127.0.0.1
          Require ip ::1
          Require host localhost
      </RequireAny>
  </Location>

</VirtualHost>


<VirtualHost *:443>
{% if env == 'pagure-staging' %}
  ServerName stg.pagure.org
{% else %}
  ServerName pagure.org
{% endif %}

  SSLEngine on
  SSLProtocol {{ ssl_protocols }}
  SSLCipherSuite {{ ssl_ciphers }}
  # Use secure TLSv1.1 and TLSv1.2 ciphers
  Header always add Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

{% if env == 'pagure-staging' %}
  SSLCertificateFile /etc/pki/tls/certs/stg.pagure.org.cert
  SSLCertificateChainFile /etc/pki/tls/certs/stg.pagure.org.intermediate.cert
  SSLCertificateKeyFile /etc/pki/tls/private/stg.pagure.org.key
{% else %}
  SSLCertificateFile /etc/pki/tls/certs/pagure.org.cert
  SSLCertificateChainFile /etc/pki/tls/certs/pagure.org.intermediate.cert
  SSLCertificateKeyFile /etc/pki/tls/private/pagure.org.key
{% endif %}
{% if env == 'pagure-staging' %}
  Redirect permanent / https://stg.pagure.io/
{% else %}
  Redirect permanent / https://pagure.io/
{% endif %}
</VirtualHost>


<VirtualHost *:443>
{% if env == 'pagure-staging' %}
  ServerName docs.stg.pagure.org
{% else %}
  ServerName docs.pagure.org
{% endif %}

  WSGIScriptAlias / /var/www/docs_pagure.wsgi

  SSLEngine on
  SSLProtocol {{ ssl_protocols }}
  SSLCipherSuite {{ ssl_ciphers }}
  # Use secure TLSv1.1 and TLSv1.2 ciphers
  Header always add Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

{% if env == 'pagure-staging' %}
  SSLCertificateFile /etc/pki/tls/certs/docs.stg.pagure.org.cert
  SSLCertificateChainFile /etc/pki/tls/certs/docs.stg.pagure.org.intermediate.cert
  SSLCertificateKeyFile /etc/pki/tls/private/docs.stg.pagure.org.key
{% else %}
  SSLCertificateFile /etc/pki/tls/certs/pagure.io.cert
  SSLCertificateChainFile /etc/pki/tls/certs/pagure.io.intermediate.cert
  SSLCertificateKeyFile /etc/pki/tls/certs/pagure.io.key
{% endif %}

  Alias /static /usr/lib/python2.7/site-packages/pagure/static/

  <Location "/static/vendor/emojione/emojione.sprites.png">
    ExpiresActive On
    ExpiresDefault "access plus 1 week"
    Header append Cache-Control "public"
  </Location>

  <Location />
    WSGIProcessGroup paguredocs
    <IfModule mod_authz_core.c>
      # Apache 2.4
      Require all granted
    </IfModule>
    <IfModule !mod_authz_core.c>
      # Apache 2.2
      Order deny,allow
      Allow from all
    </IfModule>
   </Location>
</VirtualHost>

<VirtualHost *:443>
  DocumentRoot "/var/www/releases"
{% if env == 'pagure-staging' %}
  ServerName releases.stg.pagure.org
  SSLEngine on
  SSLCertificateFile /etc/pki/tls/certs/releases.stg.pagure.org.cert
  SSLCertificateKeyFile /etc/pki/tls/private/releases.stg.pagure.org.key
  SSLCertificateChainFile /etc/pki/tls/certs/releases.stg.pagure.org.intermediate.cert
  SSLHonorCipherOrder On
  SSLProtocol {{ ssl_protocols }}
  SSLCipherSuite {{ ssl_ciphers }}
{% else %}
  ServerName releases.pagure.org
{% endif %}

  AddType application/octet-stream msi

  <Directory />
    Options +Indexes
    IndexOptions NameWidth=*
  </Directory>

</VirtualHost>

